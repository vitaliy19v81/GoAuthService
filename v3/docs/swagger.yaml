definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      data:
        description: Используйте конкретный тип вместо `interface{}` (например, []User)
      limit:
        type: integer
      offset:
        type: integer
      totalRecords:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/auth/admin/users:
    get:
      consumes:
      - application/json
      description: Возвращает список пользователей с информацией о роли, статусе и
        времени регистрации. Требуется авторизация через Bearer Token.
      parameters:
      - description: Bearer токен
        example: '"Bearer your_token"'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Количество записей для возврата (по умолчанию 10)
        in: query
        name: length
        type: integer
      - description: Смещение записей (по умолчанию 0)
        in: query
        name: start
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка при подсчёте общего числа записей
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение списка пользователей
      tags:
      - users
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация с использованием логина и пароля. Возвращает JWT токен
        доступа и устанавливает refresh токен в Cookie.
      parameters:
      - description: Данные для авторизации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с токеном доступа
          headers:
            Authorization:
              description: Bearer <токен доступа>
              type: string
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка данных запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверные учетные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Срок действия пароля истёк
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: Слишком много запросов
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Авторизация пользователя
      tags:
      - Authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя с уникальным email, username или
        phone. Обязательные поля определяются конфигурацией.
      parameters:
      - description: Данные пользователя для регистрации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Регистрация прошла успешно'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Неверные данные запроса'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'error: Имя пользователя/электронная почта/номер телефона уже
            используются'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка при создании хэша пароля или записи в базу данных'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация нового пользователя
      tags:
      - auth
swagger: "2.0"
