<script>
    document.getElementById('registerForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    const data = {username, password};

    fetch('/api/register', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
},
    body: JSON.stringify(data),
})
    .then(response => response.json())
    .then(result => {
    if (result.error) {
    document.getElementById('errorMessage').innerText = result.error;
    document.getElementById('errorMessage').style.display = 'block';
    document.getElementById('successMessage').style.display = 'none';
} else {
    document.getElementById('successMessage').innerText = result.message;
    document.getElementById('successMessage').style.display = 'block';
    document.getElementById('errorMessage').style.display = 'none';
}
})
    .catch(error => {
    document.getElementById('errorMessage').innerText = 'An error occurred';
    document.getElementById('errorMessage').style.display = 'block';
});
});
</script>


// Логика для обработки изменения роли
document.getElementById('changeRoleForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const role = document.getElementById('role').value;

    try {
        const response = await fetch('/api/assign-role', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_TOKEN_HERE', // Вставьте действительный токен
            },
            body: JSON.stringify({username, role}),
        });

        const data = await response.json();
        const messageDiv = document.getElementById('roleMessage');
        if (response.ok) {
            messageDiv.className = 'message success';
            messageDiv.textContent = 'Role updated successfully!';
        } else {
            messageDiv.className = 'message error';
            messageDiv.textContent = data.error || 'Role update failed!';
        }
    } catch (err) {
        console.error(err);
    }
});

//<script src="script1.js1"></script>

<script>
    document.getElementById('registerForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    const data = {username, password};

    fetch('/api/register', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
},
    body: JSON.stringify(data),
})
    .then(response => response.json())
    .then(result => {
    if (result.error) {
    // Если сервер вернул ошибку, показываем сообщение об ошибке
    document.getElementById('errorMessage').innerText = result.error;
    document.getElementById('errorMessage').style.display = 'block';
    document.getElementById('successMessage').style.display = 'none';
} else {
    // Успешная регистрация: сохраняем токены
    // Сохраняем токен в LocalStorage (менее безопасно, доступен из JS)
    //localStorage.setItem('authToken', result.token);
    //localStorage.setItem('refreshToken', result.refreshToken);

    // Альтернативный способ: Устанавливаем куки (более безопасно)
    document.cookie = `authToken=${result.token}; path=/; secure; samesite=strict`;
    document.cookie = `refreshToken=${result.refreshToken}; path=/; secure; samesite=strict`;

    // Сообщаем пользователю о успехе
    document.getElementById('successMessage').innerText = result.message;
    document.getElementById('successMessage').style.display = 'block';
    document.getElementById('errorMessage').style.display = 'none';
}
})
    .catch(error => {
    // Обработка ошибок сети или других непредвиденных ошибок
    document.getElementById('errorMessage').innerText = 'Произошла ошибка. Попробуйте позже.';
    document.getElementById('errorMessage').style.display = 'block';
});
});
</script>